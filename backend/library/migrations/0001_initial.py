# Generated by Django 5.1.6 on 2025-05-11 11:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('summary', models.TextField(blank=True, null=True)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('year_published', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(2035)])),
                ('original_language', models.CharField(blank=True, max_length=50, null=True)),
                ('book_id', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name': 'Book',
                'verbose_name_plural': 'Books',
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Genre',
                'verbose_name_plural': 'Genres',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Journal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('is_private', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Journal',
                'verbose_name_plural': 'Journals',
                'ordering': ['-updated_on'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('trust_level', models.IntegerField(default=50, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('profile_pic', models.URLField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('achieve_desc', models.TextField(blank=True, null=True)),
                ('achieve_icon', models.URLField(blank=True, null=True)),
                ('difficulty_lvl', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='library_ach_name_4cadda_idx'), models.Index(fields=['difficulty_lvl'], name='library_ach_difficu_475097_idx')],
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('biography', models.TextField(blank=True, null=True)),
                ('author_image', models.URLField(blank=True, null=True)),
                ('author_id', models.CharField(max_length=64, unique=True)),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='library_aut_name_b2f398_idx'), models.Index(fields=['author_id'], name='library_aut_author__b3cfb8_idx')],
            },
        ),
        migrations.CreateModel(
            name='BookAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_author_books', to='library.author')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_book_authors', to='library.book')),
            ],
        ),
        migrations.AddField(
            model_name='book',
            name='authors',
            field=models.ManyToManyField(through='library.BookAuthor', to='library.author'),
        ),
        migrations.CreateModel(
            name='BookClub',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('club_desc', models.TextField(blank=True, null=True)),
                ('is_private', models.BooleanField(default=False)),
                ('about_content', models.TextField(blank=True, help_text="Detailed description for the club's About page, perhaps to be in markdown.", null=True)),
                ('club_image', models.URLField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_book_club', to='library.book')),
                ('upcoming_book', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='upcoming_in_clubs', to='library.book')),
            ],
            options={
                'verbose_name': 'BookClub',
                'verbose_name_plural': 'BookClubs',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('content', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_announcements', to=settings.AUTH_USER_MODEL)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='library.bookclub')),
            ],
            options={
                'verbose_name': 'Announcement',
                'verbose_name_plural': 'Announcements',
                'ordering': ['-is_pinned', '-created_on'],
            },
        ),
        migrations.CreateModel(
            name='BookClubHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('club_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('order', models.PositiveIntegerField(default=1)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='read_by_clubs', to='library.book')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reading_history', to='library.bookclub')),
            ],
            options={
                'verbose_name': 'Book Club History',
                'verbose_name_plural': 'Book Club Histories',
                'ordering': ['club', '-end_date'],
            },
        ),
        migrations.CreateModel(
            name='ClubMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('join_date', models.DateTimeField(auto_now_add=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('reading_status', models.CharField(choices=[('Not Started', 'Not Started'), ('Reading', 'Reading'), ('Completed', 'Completed'), ('On Hold', 'On Hold')], default='Not Started', max_length=20)),
                ('current_page', models.PositiveIntegerField(default=0)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.bookclub')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='bookclub',
            name='users',
            field=models.ManyToManyField(through='library.ClubMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_community', to='library.book')),
            ],
            options={
                'verbose_name': 'Community',
                'verbose_name_plural': 'Communities',
            },
        ),
        migrations.CreateModel(
            name='CommunityUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_users', to='library.community')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_communities', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='community',
            name='users',
            field=models.ManyToManyField(through='library.CommunityUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Edition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isbn', models.CharField(max_length=13, unique=True)),
                ('kind', models.CharField(choices=[('Hardcover', 'Hardcover'), ('Paperback', 'Paperback'), ('eBook', 'eBook'), ('Audiobook', 'Audiobook'), ('Other', 'Other')], max_length=10)),
                ('is_primary', models.BooleanField(default=False)),
                ('publication_year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1500), django.core.validators.MaxValueValidator(2025)])),
                ('language', models.CharField(max_length=50)),
                ('page_count', models.PositiveIntegerField(blank=True, null=True)),
                ('edition_number', models.PositiveIntegerField(blank=True, null=True)),
                ('abridged', models.BooleanField(default=False)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='editions', to='library.book')),
            ],
            options={
                'verbose_name': 'Edition',
                'verbose_name_plural': 'Editions',
                'ordering': ['-publication_year'],
            },
        ),
        migrations.CreateModel(
            name='CoverImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.URLField()),
                ('is_primary', models.BooleanField(default=False)),
                ('edition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_edition_image', to='library.edition')),
            ],
            options={
                'verbose_name': 'CoverImage',
                'verbose_name_plural': 'CoverImages',
            },
        ),
        migrations.CreateModel(
            name='BookGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_book_genres', to='library.book')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_genre_books', to='library.genre')),
            ],
            options={
                'ordering': ['genre__name'],
            },
        ),
        migrations.AddField(
            model_name='book',
            name='genres',
            field=models.ManyToManyField(through='library.BookGenre', to='library.genre'),
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('content', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('page_num', models.PositiveIntegerField(blank=True, null=True)),
                ('is_private', models.BooleanField(default=False)),
                ('journal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='library.journal')),
            ],
            options={
                'verbose_name': 'JournalEntry',
                'verbose_name_plural': 'JournalEntries',
                'ordering': ['-updated_on'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('content', models.TextField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('flagged_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('page_num', models.PositiveIntegerField(blank=True, null=True)),
                ('club', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='club_posts', to='library.bookclub')),
                ('community', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='community_posts', to='library.community')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Post',
                'verbose_name_plural': 'Posts',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('flagged_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('page_num', models.PositiveIntegerField(blank=True, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='library.postcomment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='library.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_on'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('contact_info', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Publisher',
                'verbose_name_plural': 'Publishers',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='library_pub_name_d0230a_idx')],
            },
        ),
        migrations.AddField(
            model_name='edition',
            name='publisher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='editions', to='library.publisher'),
        ),
        migrations.CreateModel(
            name='ReadingSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reading_schedules', to='library.book')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reading_schedules', to='library.bookclub')),
            ],
            options={
                'verbose_name': 'Reading Schedule',
                'verbose_name_plural': 'Reading Schedules',
                'ordering': ['-is_active', '-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('flagged_count', models.PositiveBigIntegerField(default=0)),
                ('rating', models.DecimalField(decimal_places=2, max_digits=3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(5.0)])),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='library.book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='ReviewComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('flagged_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('page_num', models.PositiveIntegerField(blank=True, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='library.reviewcomment')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='library.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_on'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScheduleMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('target_date', models.DateField()),
                ('page_start', models.PositiveIntegerField(blank=True, null=True)),
                ('page_end', models.PositiveIntegerField(blank=True, null=True)),
                ('chapter_start', models.CharField(blank=True, max_length=50, null=True)),
                ('chapter_end', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('schedule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='library.readingschedule')),
            ],
            options={
                'verbose_name': 'Schedule Milestone',
                'verbose_name_plural': 'Schedule Milestones',
                'ordering': ['schedule', 'target_date'],
            },
        ),
        migrations.CreateModel(
            name='Shelf',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('shelf_desc', models.TextField(blank=True, null=True)),
                ('shelf_img', models.URLField(blank=True, null=True)),
                ('is_private', models.BooleanField(default=False)),
                ('shelf_type', models.CharField(choices=[('Owned', 'Owned'), ('Read', 'Read'), ('Reading', 'Reading'), ('Want to Read', 'Want to Read'), ('Available', 'Available'), ('Lent Out', 'Lent Out'), ('Custom', 'Custom')], max_length=20)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shelves', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Shelf',
                'verbose_name_plural': 'Shelves',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ShelfComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('flagged_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('page_num', models.PositiveIntegerField(blank=True, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='library.shelfcomment')),
                ('shelf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='library.shelf')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_on'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ShelfEdition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('edition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='edition_shelves', to='library.edition')),
                ('shelf', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shelf_books', to='library.shelf')),
            ],
        ),
        migrations.AddField(
            model_name='shelf',
            name='books',
            field=models.ManyToManyField(through='library.ShelfEdition', to='library.edition'),
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_achievement_users', to='library.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['completion_percentage'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='achievements',
            field=models.ManyToManyField(through='library.UserAchievement', to='library.achievement'),
        ),
        migrations.CreateModel(
            name='UserBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_status', models.CharField(blank=True, choices=[('Read', 'Read'), ('Reading', 'Reading'), ('Want to Read', 'Want to Read')], max_length=20, null=True)),
                ('page_num', models.PositiveBigIntegerField(default=0)),
                ('is_owned', models.BooleanField(default=False)),
                ('date_started', models.DateField(blank=True, null=True)),
                ('date_ended', models.DateField(blank=True, null=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_user_books', to='library.book')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_user_books', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='journal',
            name='user_book',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='journal', to='library.userbook'),
        ),
        migrations.AddField(
            model_name='user',
            name='books',
            field=models.ManyToManyField(through='library.UserBook', to='library.book'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, null=True)),
                ('zip_code', models.CharField(default='11210', max_length=10)),
                ('social_links', models.CharField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='related_user_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'UserProfile',
                'verbose_name_plural': 'UserProfiles',
            },
        ),
        migrations.AddIndex(
            model_name='bookauthor',
            index=models.Index(fields=['book', 'author'], name='library_boo_book_id_df3dfd_idx'),
        ),
        migrations.AddIndex(
            model_name='bookauthor',
            index=models.Index(fields=['author', 'book'], name='library_boo_author__f70c84_idx'),
        ),
        migrations.AddConstraint(
            model_name='bookauthor',
            constraint=models.UniqueConstraint(fields=('book', 'author'), name='unique_book_author'),
        ),
        migrations.AddIndex(
            model_name='announcement',
            index=models.Index(fields=['club'], name='library_ann_club_id_0e0f80_idx'),
        ),
        migrations.AddIndex(
            model_name='announcement',
            index=models.Index(fields=['created_on'], name='library_ann_created_eb03df_idx'),
        ),
        migrations.AddIndex(
            model_name='announcement',
            index=models.Index(fields=['is_pinned'], name='library_ann_is_pinn_e9b130_idx'),
        ),
        migrations.AddIndex(
            model_name='bookclubhistory',
            index=models.Index(fields=['club', 'book'], name='library_boo_club_id_ae4016_idx'),
        ),
        migrations.AddIndex(
            model_name='bookclubhistory',
            index=models.Index(fields=['end_date'], name='library_boo_end_dat_248504_idx'),
        ),
        migrations.AddConstraint(
            model_name='bookclubhistory',
            constraint=models.UniqueConstraint(fields=('club', 'book', 'order'), name='unique_club_book_order'),
        ),
        migrations.AddIndex(
            model_name='clubmember',
            index=models.Index(fields=['club', 'is_admin'], name='library_clu_club_id_8696c5_idx'),
        ),
        migrations.AddIndex(
            model_name='clubmember',
            index=models.Index(fields=['reading_status'], name='library_clu_reading_3b2b58_idx'),
        ),
        migrations.AddConstraint(
            model_name='clubmember',
            constraint=models.UniqueConstraint(fields=('user', 'club'), name='unique_club_user'),
        ),
        migrations.AddIndex(
            model_name='bookclub',
            index=models.Index(fields=['name'], name='library_boo_name_d854ab_idx'),
        ),
        migrations.AddConstraint(
            model_name='communityuser',
            constraint=models.UniqueConstraint(fields=('community', 'user'), name='unique_community_user'),
        ),
        migrations.AddIndex(
            model_name='bookgenre',
            index=models.Index(fields=['book', 'genre'], name='library_boo_book_id_6bd4f4_idx'),
        ),
        migrations.AddIndex(
            model_name='bookgenre',
            index=models.Index(fields=['genre', 'book'], name='library_boo_genre_i_2ad37e_idx'),
        ),
        migrations.AddConstraint(
            model_name='bookgenre',
            constraint=models.UniqueConstraint(fields=('book', 'genre'), name='unique_book_genre'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['title'], name='library_boo_title_c38ef2_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['year_published'], name='library_boo_year_pu_152fda_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['book_id'], name='library_boo_book_id_ea9395_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['title'], name='library_jou_title_86c73f_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['page_num'], name='library_jou_page_nu_6cc00d_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['updated_on'], name='library_jou_updated_894b6e_idx'),
        ),
        migrations.AddIndex(
            model_name='journalentry',
            index=models.Index(fields=['is_private'], name='library_jou_is_priv_669d73_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['title'], name='library_pos_title_21cd4d_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['like_count'], name='library_pos_like_co_7148d6_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['page_num'], name='library_pos_page_nu_4e92ea_idx'),
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('club__isnull', False), ('community__isnull', True)), models.Q(('club__isnull', True), ('community__isnull', False)), _connector='OR'), name='post_must_have_one_relation'),
        ),
        migrations.AddIndex(
            model_name='postcomment',
            index=models.Index(fields=['like_count'], name='library_pos_like_co_75bafd_idx'),
        ),
        migrations.AddIndex(
            model_name='postcomment',
            index=models.Index(fields=['page_num'], name='library_pos_page_nu_de53b2_idx'),
        ),
        migrations.AddIndex(
            model_name='postcomment',
            index=models.Index(fields=['created_on'], name='library_pos_created_bdc8b8_idx'),
        ),
        migrations.AddIndex(
            model_name='edition',
            index=models.Index(fields=['isbn'], name='library_edi_isbn_e9e726_idx'),
        ),
        migrations.AddIndex(
            model_name='edition',
            index=models.Index(fields=['publication_year'], name='library_edi_publica_9f41b7_idx'),
        ),
        migrations.AddIndex(
            model_name='edition',
            index=models.Index(fields=['kind'], name='library_edi_kind_2603fa_idx'),
        ),
        migrations.AddIndex(
            model_name='readingschedule',
            index=models.Index(fields=['club', 'book'], name='library_rea_club_id_acee8d_idx'),
        ),
        migrations.AddIndex(
            model_name='readingschedule',
            index=models.Index(fields=['is_active'], name='library_rea_is_acti_5e9626_idx'),
        ),
        migrations.AddIndex(
            model_name='readingschedule',
            index=models.Index(fields=['start_date'], name='library_rea_start_d_403ae2_idx'),
        ),
        migrations.AddIndex(
            model_name='readingschedule',
            index=models.Index(fields=['end_date'], name='library_rea_end_dat_9337e4_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_on'], name='library_rev_created_f8b889_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['rating'], name='library_rev_rating_1cb5d7_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewcomment',
            index=models.Index(fields=['like_count'], name='library_rev_like_co_0821ee_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewcomment',
            index=models.Index(fields=['page_num'], name='library_rev_page_nu_ecbbe1_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewcomment',
            index=models.Index(fields=['created_on'], name='library_rev_created_e73be5_idx'),
        ),
        migrations.AddIndex(
            model_name='schedulemilestone',
            index=models.Index(fields=['schedule'], name='library_sch_schedul_5e0363_idx'),
        ),
        migrations.AddIndex(
            model_name='schedulemilestone',
            index=models.Index(fields=['target_date'], name='library_sch_target__73220e_idx'),
        ),
        migrations.AddIndex(
            model_name='shelfcomment',
            index=models.Index(fields=['like_count'], name='library_she_like_co_44ecc3_idx'),
        ),
        migrations.AddIndex(
            model_name='shelfcomment',
            index=models.Index(fields=['page_num'], name='library_she_page_nu_85ee47_idx'),
        ),
        migrations.AddIndex(
            model_name='shelfcomment',
            index=models.Index(fields=['created_on'], name='library_she_created_99de7c_idx'),
        ),
        migrations.AddConstraint(
            model_name='shelfedition',
            constraint=models.UniqueConstraint(fields=('shelf', 'edition'), name='unique_shelf_edition'),
        ),
        migrations.AddIndex(
            model_name='shelf',
            index=models.Index(fields=['name'], name='library_she_name_9fea59_idx'),
        ),
        migrations.AddIndex(
            model_name='shelf',
            index=models.Index(fields=['shelf_type'], name='library_she_shelf_t_820c12_idx'),
        ),
        migrations.AddIndex(
            model_name='userachievement',
            index=models.Index(fields=['completed'], name='library_use_complet_b93863_idx'),
        ),
        migrations.AddConstraint(
            model_name='userachievement',
            constraint=models.UniqueConstraint(fields=('user', 'achievement'), name='unique_user_achievement'),
        ),
        migrations.AddIndex(
            model_name='userbook',
            index=models.Index(fields=['read_status'], name='library_use_read_st_acd498_idx'),
        ),
        migrations.AddIndex(
            model_name='userbook',
            index=models.Index(fields=['is_owned'], name='library_use_is_owne_9eae47_idx'),
        ),
        migrations.AddConstraint(
            model_name='userbook',
            constraint=models.UniqueConstraint(fields=('user', 'book'), name='unique_user_book'),
        ),
        migrations.AddIndex(
            model_name='journal',
            index=models.Index(fields=['updated_on'], name='library_jou_updated_27cc67_idx'),
        ),
        migrations.AddIndex(
            model_name='journal',
            index=models.Index(fields=['is_private'], name='library_jou_is_priv_dbc54c_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='library_use_usernam_0569ae_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='library_use_email_a4a550_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['zip_code'], name='library_use_zip_cod_e2100c_idx'),
        ),
    ]
